<UserControl
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:Module2.Views"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:lex="http://wpflocalizeextension.codeplex.com"
             xmlns:prism="http://prismlibrary.com/"
             xmlns:ViewModels="clr-namespace:Module2.ViewModels" x:Class="Module2.Views.M2"
             lex:LocalizeDictionary.DesignCulture="ja-JP"
             lex:ResxLocalizationProvider.DefaultAssembly="CommonModels"
             lex:ResxLocalizationProvider.DefaultDictionary="Resources"
             mc:Ignorable="d" 
             d:DesignHeight="1368" d:DesignWidth="1074"
             prism:ViewModelLocator.AutoWireViewModel="True" 
             d:DataContext="{d:DesignInstance {x:Type ViewModels:M2ViewModel}}" >
    <Grid Background="#FFFFF1E2">
        <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" Margin="5" Visibility="Collapsed">
            <TextBlock><Run Text="Prism(Unity)"/><LineBreak/><Run/><LineBreak/><Run Text="Prism.Unityを使用"/><Run Text="しています。"/><LineBreak/><Run Text="Mainアプリの所定の場所にModuleを埋め込んで表示"/><Run Text="します。"/><LineBreak/><Run Text="Moduleは"/><Run Text="、"/><Run Text="Build後に"/><Run Text="「Modules」"/><Run Text="フォルダー"/><Run Text="へ下記の設定でコピーします。"/><LineBreak/><Run Text="xcopy &quot;$(TargetDir)$(TargetName)*$(TargetExt)&quot; &quot;$(SolutionDir)$(SolutionName)\$(OutDir)Modules&quot; /Y /S"/><LineBreak/><Run Text="メインアプリでは、「Modules」"/><Run Text="フォルダー"/><Run Text="にあるモジュールを読み込みます。これによってPluginとして使用できます。"/><LineBreak/><Run/><LineBreak/><Run Text="★メインアプリのApp.xaml.cs"/><LineBreak/><Run Text="共有オブジェクトを生成、フォルダーからモジュールを収集"/><LineBreak/><Span Foreground="Black"><Run Text="    "/></Span><Span Foreground="Blue"><Run Text="public"/></Span><Span Foreground="Black"><Run Text=" "/></Span><Span Foreground="Blue"><Run Text="partial"/></Span><Span Foreground="Black"><Run Text=" "/></Span><Span Foreground="Blue"><Run Text="class"/></Span><Span Foreground="Black"><Run Text=" "/></Span><Span Foreground="#FF2B91AF"><Run Text="App"/></Span><LineBreak/><Span Foreground="Black"><Run Text="    {"/></Span><LineBreak/><Span Foreground="Black"><Run Text="        "/></Span><Span Foreground="Blue"><Run Text="protected"/></Span><Span Foreground="Black"><Run Text=" "/></Span><Span Foreground="Blue"><Run Text="override"/></Span><Span Foreground="Black"><Run Text=" Window CreateShell()"/></Span><LineBreak/><Span Foreground="Black"><Run Text="        {"/></Span><LineBreak/><Span Foreground="Black"><Run Text="            "/></Span><Span Foreground="Blue"><Run Text="return"/></Span><Span Foreground="Black"><Run Text=" Container.Resolve&lt;MainWindow&gt;();"/></Span><LineBreak/><Span Foreground="Black"><Run Text="        }"/></Span><LineBreak/><LineBreak/><Span Foreground="Black"><Run Text="        "/></Span><Span Foreground="Blue"><Run Text="protected"/></Span><Span Foreground="Black"><Run Text=" "/></Span><Span Foreground="Blue"><Run Text="override"/></Span><Span Foreground="Black"><Run Text=" "/></Span><Span Foreground="Blue"><Run Text="void"/></Span><Span Foreground="Black"><Run Text=" RegisterTypes(IContainerRegistry containerRegistry)"/></Span><LineBreak/><Span Foreground="Black"><Run Text="        {"/></Span><LineBreak/><Span Foreground="Black"><Run Text="            "/></Span><Span Foreground="Green"><Run Text="//アプリ全体で共有したいオブジェクトをシングルトンで生成する。"/></Span><LineBreak/><Span Foreground="Black"><Run Text="            "/></Span><Span Foreground="Green"><Run Text="//モジュール側ではViewModelのコンストラクターの引数で受け取る"/></Span><LineBreak/><Span Foreground="Black"><Run Text="            containerRegistry.RegisterSingleton&lt;CommonModels.CommonData&gt;();"/></Span><LineBreak/><Span Foreground="Black"><Run Text="        }"/></Span><LineBreak/><LineBreak/><Span Foreground="Black"><Run Text="        "/></Span><Span Foreground="Blue"><Run Text="protected"/></Span><Span Foreground="Black"><Run Text=" "/></Span><Span Foreground="Blue"><Run Text="override"/></Span><Span Foreground="Black"><Run Text=" IModuleCatalog CreateModuleCatalog()"/></Span><LineBreak/><Span Foreground="Black"><Run Text="        {"/></Span><LineBreak/><Span Foreground="Black"><Run Text="            "/></Span><Span Foreground="Green"><Run Text="//Modulesフォルダーにあるモジュールを読み込む。"/></Span><LineBreak/><Span Foreground="Black"><Run Text="            "/></Span><Span Foreground="Green"><Run Text="//読み込まれる先はモジュール側に書かれたRegionNameの場所"/></Span><LineBreak/><Span Foreground="Black"><Run Text="            "/></Span><Span Foreground="Blue"><Run Text="return"/></Span><Span Foreground="Black"><Run Text=" "/></Span><Span Foreground="Blue"><Run Text="new"/></Span><Span Foreground="Black"><Run Text=" DirectoryModuleCatalog() { ModulePath = "/></Span><Span Foreground="Maroon"><Run Text="@&quot;.\Modules&quot;"/></Span><Span Foreground="Black"><Run Text=" };"/></Span><LineBreak/><Span Foreground="Black"><Run Text="        }"/></Span><LineBreak/><Span Foreground="Black"><Run Text="    }"/></Span><LineBreak/><Run/><LineBreak/><Run Text="★メインアプリのView"/><LineBreak/><Run Text="Viewにモジュールを読み込むContentRegionを設定している"/><Run Text="　"/><Span Foreground="Blue" FontSize="12.6666666666667" FontFamily="MS Gothic"><Run/></Span><LineBreak/><Run Foreground="Blue" FontSize="12.6666666666667" FontFamily="MS Gothic" Text="　　"/><Run Foreground="Blue" FontSize="12.6666666666667" FontFamily="MS Gothic" Text="&lt;"/><Span Foreground="#FFA31515" FontSize="12.6666666666667" FontFamily="MS Gothic"><Run Text="TabControl"/></Span><Span Foreground="Red" FontSize="12.6666666666667" FontFamily="MS Gothic"><Run Text=" prism"/></Span><Span Foreground="Blue" FontSize="12.6666666666667" FontFamily="MS Gothic"><Run Text=":"/></Span><Span Foreground="Red" FontSize="12.6666666666667" FontFamily="MS Gothic"><Run Text="RegionManager.RegionName"/></Span><Span Foreground="Blue" FontSize="12.6666666666667" FontFamily="MS Gothic"><Run Text="=&quot;ContentRegion&quot;"/></Span><Run Foreground="Red" FontSize="12.6666666666667" FontFamily="MS Gothic" Text=" "/><Run Foreground="Blue" FontSize="12.6666666666667" FontFamily="MS Gothic" Text="/&gt;"/><LineBreak/><Run Text="モジュールのViewModelのTitleとTabItemのHeaderをバインド"/><LineBreak/><Span Foreground="Black"><Run Text="    "/></Span><Span Foreground="Blue"><Run Text="&lt;"/></Span><Span Foreground="#FFA31515"><Run Text="Window.Resources"/></Span><Span Foreground="Blue"><Run Text="&gt;"/></Span><LineBreak/><Span Foreground="Black"><Run Text="        "/></Span><Span Foreground="Blue"><Run Text="&lt;"/></Span><Span Foreground="#FFA31515"><Run Text="Style"/></Span><Span Foreground="Red"><Run Text=" TargetType"/></Span><Span Foreground="Blue"><Run Text="=&quot;TabItem&quot;&gt;"/></Span><LineBreak/><Span Foreground="Black"><Run Text="            "/></Span><Span Foreground="Blue"><Run Text="&lt;"/></Span><Span Foreground="#FFA31515"><Run Text="Setter"/></Span><Span Foreground="Red"><Run Text=" Property"/></Span><Span Foreground="Blue"><Run Text="=&quot;Header&quot;"/></Span><Span Foreground="Red"><Run Text=" Value"/></Span><Span Foreground="Blue"><Run Text="=&quot;{"/></Span><Span Foreground="#FFA31515"><Run Text="Binding"/></Span><Span Foreground="Red"><Run Text=" DataContext"/></Span><Span Foreground="Blue"><Run Text=".Title}&quot; /&gt;"/></Span><LineBreak/><Span Foreground="Black"><Run Text="        "/></Span><Span Foreground="Blue"><Run Text="&lt;/"/></Span><Span Foreground="#FFA31515"><Run Text="Style"/></Span><Span Foreground="Blue"><Run Text="&gt;"/></Span><LineBreak/><Span Foreground="Black"><Run Text="    "/></Span><Span Foreground="Blue"><Run Text="&lt;/"/></Span><Span Foreground="#FFA31515"><Run Text="Window.Resources"/></Span><Span Foreground="Blue"><Run Text="&gt;"/></Span><LineBreak/><Run FontSize="12.6666666666667" FontFamily="MS Gothic"/><LineBreak/><Run/><LineBreak/><Run Text="★"/><Run Text="モジュールのコンストラクター"/><LineBreak/><Run/><Run Text="モジュール間で共有されるオブジェクトはモジュールのコンストラクターの引数で渡される"/><LineBreak/><Run Text="引数無しのコンストラクターもBlendの為に残しておく"/><LineBreak/><Run Text="    CommonData myCommonData;"/><LineBreak/><Run Text="    IEventAggregator _ea;"/><LineBreak/><Run/><LineBreak/><Span Foreground="Black"><Run Text="        "/></Span><Span Foreground="Blue"><Run Text="public"/></Span><Span Foreground="Black"><Run Text=" ViewAViewModel(CommonData commondata, IEventAggregator ea)"/></Span><LineBreak/><Span Foreground="Black"><Run Text="        {"/></Span><LineBreak/><Span Foreground="Black"><Run Text="            myCommonData = commondata;"/></Span><LineBreak/><Span Foreground="Black"><Run Text="            _ea = ea;"/></Span><LineBreak/><LineBreak/><Span Foreground="Black"><Run Text="            "/></Span><Span Foreground="Green"><Run Text="//モデルの生成"/></Span><LineBreak/><Span Foreground="Black"><Run Text="            MyViewAModel = "/></Span><Span Foreground="Blue"><Run Text="new"/></Span><Span Foreground="Black"><Run Text=" ViewAModel(myCommonData, _ea);"/></Span><LineBreak/><Run Text="            "/><Run Text="//イベントの購読　（言語の変更)"/><LineBreak/><Span Foreground="Black"><Run Text="            _ea.GetEvent&lt;LanguageChangeEvent&gt;().Subscribe(ChangedLang);"/></Span><LineBreak/><LineBreak/><Span Foreground="Black"><Run Text="            "/></Span><Span Foreground="Green"><Run Text="//TabItemのHeaderになる言葉を多言語設定の為Resoucesから取り出す"/></Span><LineBreak/><Span Foreground="Black"><Run Text="            Title = CommonData.GetLocalizedValue&lt;"/></Span><Span Foreground="Blue"><Run Text="string"/></Span><Span Foreground="Black"><Run Text="&gt;("/></Span><Span Foreground="#FFA31515"><Run Text="&quot;TITLEM2&quot;"/></Span><Span Foreground="Black"><Run Text=");"/></Span><LineBreak/><Run Text="        }"/><LineBreak/><Run/><LineBreak/><Run Text="★Module2Module.cs"/><LineBreak/><Span Foreground="Black"><Run Text="        "/></Span><Span Foreground="Blue"><Run Text="public"/></Span><Span Foreground="Black"><Run Text=" "/></Span><Span Foreground="Blue"><Run Text="void"/></Span><Span Foreground="Black"><Run Text=" OnInitialized(IContainerProvider containerProvider)"/></Span><LineBreak/><Span Foreground="Black"><Run Text="        {"/></Span><LineBreak/><Span Foreground="Black"><Run Text="            "/></Span><Span Foreground="Green"><Run Text="//ViewA を ContentRegion に入れる"/></Span><LineBreak/><Span Foreground="Black"><Run Text="            "/></Span><Span Foreground="Blue"><Run Text="var"/></Span><Span Foreground="Black"><Run Text=" regionManager = containerProvider.Resolve&lt;IRegionManager&gt;();"/></Span><LineBreak/><Span Foreground="Black"><Run Text="            regionManager.RegisterViewWithRegion("/></Span><Span Foreground="#FFA31515"><Run Text="&quot;ContentRegion&quot;"/></Span><Span Foreground="Black"><Run Text=", "/></Span><Span Foreground="Blue"><Run Text="typeof"/></Span><Span Foreground="Black"><Run Text="(ViewA));"/></Span><LineBreak/><Run Text="        }"/><LineBreak/><Run/><LineBreak/><Run Text="★ViewA.xaml.cs"/><LineBreak/><Run Text="タブコントロール等複数のモジュールを読み込む時の順番は"/><Run Text="、Viewに以下の様に"/><LineBreak/><Span Foreground="Black"><Run Text="    [Prism.Regions.ViewSortHint("/></Span><Span Foreground="#FFA31515"><Run Text="&quot;9000&quot;"/></Span><Span Foreground="Black"><Run Text=")]"/></Span><LineBreak/><Run Text="    "/><Span Foreground="Blue"><Run Text="public"/></Span><Span Foreground="Black"><Run Text=" "/></Span><Span Foreground="Blue"><Run Text="partial"/></Span><Span Foreground="Black"><Run Text=" "/></Span><Span Foreground="Blue"><Run Text="class"/></Span><Span Foreground="Black"><Run Text=" "/></Span><Span Foreground="#FF2B91AF"><Run Text="ViewA"/></Span><Run Text=" : UserControl"/><LineBreak/><Run Text="とAttributeを付けることでコントロール可能"/><LineBreak/><Run/><LineBreak/><Run Text="モジュールを修正した時にはリビルドしてDLLをModulesフォルダーにコピーしないと反映されない。"/><LineBreak/><Run Text="モジュールで参照されているライブラリーはメインアプリでも参照するか、メインアプリのフォルダーにコピーする。"/><LineBreak/><Run/><LineBreak/><Run/><LineBreak/><LineBreak/></TextBlock>
        </ScrollViewer>
        <TextBlock Text="{Binding Message}"
                       HorizontalAlignment="Right"
                       VerticalAlignment="Top" MinWidth="60" Margin="0,5,25,0" />
        <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" Margin="5">
            <TextBox TextWrapping="Wrap" Text="Prism(Unity)&#xA;&#xA;Prism.Unityを使用しています。&#xA;Mainアプリの所定の場所にModuleを埋め込んで表示します。&#xA;Moduleは、Build後に「Modules」フォルダーへ下記の設定でコピーします。&#xA;xcopy &quot;$(TargetDir)$(TargetName)*$(TargetExt)&quot; &quot;$(SolutionDir)$(SolutionName)\$(OutDir)Modules&quot; /Y /S&#xA;メインアプリでは、「Modules」フォルダーにあるモジュールを読み込みます。これによってPluginとして使用できます。&#xA;&#xA;★メインアプリのApp.xaml.cs&#xA;共有オブジェクトを生成、フォルダーからモジュールを収集&#xA;    public partial class App&#xA;    {&#xA;        protected override Window CreateShell()&#xA;        {&#xA;            return Container.Resolve&lt;MainWindow&gt;();&#xA;        }&#xA;&#xA;        protected override void RegisterTypes(IContainerRegistry containerRegistry)&#xA;        {&#xA;            //アプリ全体で共有したいオブジェクトをシングルトンで生成する。&#xA;            //モジュール側ではViewModelのコンストラクターの引数で受け取る&#xA;            containerRegistry.RegisterSingleton&lt;CommonModels.CommonData&gt;();&#xA;        }&#xA;&#xA;        protected override IModuleCatalog CreateModuleCatalog()&#xA;        {&#xA;            //Modulesフォルダーにあるモジュールを読み込む。&#xA;            //読み込まれる先はモジュール側に書かれたRegionNameの場所&#xA;            return new DirectoryModuleCatalog() { ModulePath = @&quot;.\Modules&quot; };&#xA;        }&#xA;    }&#xA;&#xA;★メインアプリのView&#xA;Viewにモジュールを読み込むContentRegionを設定している　&#xA;　　&lt;TabControl prism:RegionManager.RegionName=&quot;ContentRegion&quot; /&gt;&#xA;モジュールのViewModelのTitleとTabItemのHeaderをバインド&#xA;    &lt;Window.Resources&gt;&#xA;        &lt;Style TargetType=&quot;TabItem&quot;&gt;&#xA;            &lt;Setter Property=&quot;Header&quot; Value=&quot;{Binding DataContext.Title}&quot; /&gt;&#xA;        &lt;/Style&gt;&#xA;    &lt;/Window.Resources&gt;&#xA;&#xA;★モジュールのコンストラクター&#xA;モジュール間で共有されるオブジェクトはモジュールのコンストラクターの引数で渡される&#xA;引数無しのコンストラクターもBlendの為に残しておく&#xA;    CommonData myCommonData;&#xA;    IEventAggregator _ea;&#xA;&#xA;        public ViewAViewModel(CommonData commondata, IEventAggregator ea)&#xA;        {&#xA;            myCommonData = commondata;&#xA;            _ea = ea;&#xA;&#xA;            //モデルの生成&#xA;            MyViewAModel = new ViewAModel(myCommonData, _ea);&#xA;            //イベントの購読　（言語の変更)&#xA;            _ea.GetEvent&lt;LanguageChangeEvent&gt;().Subscribe(ChangedLang);&#xA;&#xA;            //TabItemのHeaderになる言葉を多言語設定の為Resoucesから取り出す&#xA;            Title = CommonData.GetLocalizedValue&lt;string&gt;(&quot;TITLEM2&quot;);&#xA;        }&#xA;&#xA;★Module2Module.cs&#xA;        public void OnInitialized(IContainerProvider containerProvider)&#xA;        {&#xA;            //ViewA を ContentRegion に入れる&#xA;            var regionManager = containerProvider.Resolve&lt;IRegionManager&gt;();&#xA;            regionManager.RegisterViewWithRegion(&quot;ContentRegion&quot;, typeof(ViewA));&#xA;        }&#xA;&#xA;★ViewA.xaml.cs&#xA;タブコントロール等複数のモジュールを読み込む時の順番は、Viewに以下の様に&#xA;    [Prism.Regions.ViewSortHint(&quot;9000&quot;)]&#xA;    public partial class ViewA : UserControl&#xA;とAttributeを付けることでコントロール可能&#xA;&#xD;&#xA;・・・・・・・・・・・・・・・　注意　下記を忘れないように　・・・・・・・・・・・・・・・・&#xA;モジュールを修正した時にはリビルドしてDLLをModulesフォルダーにコピーしないと反映されない。&#xA;モジュールで参照されているライブラリーはメインアプリでも参照するか、メインアプリのフォルダーにコピーする。&#xA;&#xA;&#xA;&#xA;&#xA;" Background="{x:Null}" BorderThickness="0" IsReadOnly="True"/>
        </ScrollViewer>
    </Grid>
</UserControl>
